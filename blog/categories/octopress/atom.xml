<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | 読書帳]]></title>
  <link href="http://delta2323.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://delta2323.github.io/"/>
  <updated>2014-08-10T11:43:49+09:00</updated>
  <id>http://delta2323.github.io/</id>
  <author>
    <name><![CDATA[Kenta OONO]]></name>
    <email><![CDATA[k.oono.delta@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressの記事に「続きを読む」を追加する]]></title>
    <link href="http://delta2323.github.io/blog/2014/08/10/more/"/>
    <updated>2014-08-10T11:42:00+09:00</updated>
    <id>http://delta2323.github.io/blog/2014/08/10/more</id>
    <content type="html"><![CDATA[<p>Octopressの記事に「続きを読む」を追加するには、表示させたい箇所に <code>&lt;!-- more --&gt;</code>を追加すれば良い。</p>

<h2 id="section">参考</h2>

<ul>
  <li><a href="http://octopress.org/docs/blogging/">Octopress</a></li>
</ul>

<p>ここに書いてある通りでうまくいった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[記事の下書きの管理]]></title>
    <link href="http://delta2323.github.io/blog/2014/01/26/manage-draft/"/>
    <updated>2014-01-26T10:42:22+09:00</updated>
    <id>http://delta2323.github.io/blog/2014/01/26/manage-draft</id>
    <content type="html"><![CDATA[<p>普段のメールでもそうなのだけれど、緊急のものでなければ文章を書いた後にそれを「寝かし」てから公開する事が多い
（なので、このブログでも日付が公開日時より大分前になってしまう記事が今後増えるような気がする）。
Octopressで下書きってどう管理するのが良いのだろうと思い、調べてみた。</p>

<!-- more -->

<p>まず、記事を公開しないようにするには、記事のヘッダー部分に<code>published: false</code>と書けば十分の様子（[Octopress]より）。
この状態で通常の通り</p>

<p><code>
$ rake exec generate
$ rake exec gen_deploy
</code></p>

<p>を行うと、該当の記事は非公開のままデプロイされる。</p>

<p>一方、以下の手順で記事を手元でプレビューした際には、<code>publised: false</code>の有無にかかわらず記事が表示される。</p>

<p><code>
$ rake exec generate
$ rake exec preview
</code></p>

<p>「えっ？」と思ったけれど、確かに記事作成途中にどのように表示されるかは確認したいし、それがプレビューの目的だからそりゃそうだと納得した
しかし、一方でプレビューだけでは、どの記事が非公開設定となっているかがわからないので、誤って非公開の記事を公開してしまうかもと思った。</p>

<p>そこで探した所、下書き状態の記事を一覧表示し、書き終わった記事を公開するためのRakeコマンド<code>publish_draft</code>を作成した人を発見した（[Chatswood]より）。
具体的にはRakefileにリンク先のスクリプトを追加し、コマンドラインから<code>rake publish_draft</code>を実行すれば良い。
公開設定されていない記事が一覧表示された。
今回の記事もこのワークフローで公開している（予定）。</p>

<h2 id="section">参考</h2>

<ul>
  <li><a href="http://octopress.org/docs/blogging/">Octopress</a></li>
</ul>

<p><code>published: false</code>について、ここに書いてある通りでうまくいった。</p>

<ul>
  <li><a href="http://blog.chatswood.org.uk/blog/2012/10/21/working-with-drafts-in-octopress/">Chatswood</a></li>
</ul>

<p><code>rake publish_draft</code>について、ここに書いてある通りでうまくいった。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト投稿]]></title>
    <link href="http://delta2323.github.io/blog/2014/01/12/first-post/"/>
    <updated>2014-01-12T13:14:10+09:00</updated>
    <id>http://delta2323.github.io/blog/2014/01/12/first-post</id>
    <content type="html"><![CDATA[<p>今年はきちんとものを書こうと決めたので、個人サイトとブログの整備を行う。
個人サイトは昔作ったものがあったのでそれを掘り出して利用する。
ブログについては調べてみると、Octpress + Github PagesがMarkDownも使えて便利そうなのでこれを採用しようと思う。</p>

<h2 id="section">数式の表示</h2>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<h2 id="section-1">参考にしたサイト</h2>

<h4 id="octpress--github-pages">Octpress + Github Pagesの連携について</h4>

<ul>
  <li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">Glide Note</a></li>
</ul>

<p>Rubyの管理はrbenvで既に行っていたので、rvmは使用しなかった。</p>

<h4 id="section-2">数式の表示について</h4>

<ul>
  <li><a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Carpe diem (Felix’s blog)</a></li>
</ul>

<p>ここに書いている通りに行ってうまくいった。</p>
]]></content>
  </entry>
  
</feed>
